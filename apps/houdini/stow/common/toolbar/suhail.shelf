<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="glb2usd0" label="Glb 2 USD" icon="$ICON_DIR/600px-gltf_official_logo.svg.png.webp">
    <script scriptType="python"><![CDATA[import hou
from importlib import reload
from usdUtils import glb2usd

reload(glb2usd)

glb_file_path = hou.ui.selectFile(start_directory=hou.getenv('HIP'), title='Select glb file', collapse_sequences=False, file_type=hou.fileType.Gltf)
glbObjAsset = glb2usd.GlbObjAsset(glb_file_path)
glbObjAsset.import_glb()
glb_stage = glb2usd.GlbStageAsset(glbObjAsset)

]]></script>
  </tool>

  <tool name="fspy_cam" label="fSpy" icon="$ICON_DIR/fspy_icon.png">
    <script scriptType="python"><![CDATA[from  houdinilab import fSpy
from importlib import reload
# reload(fSpy)
fspy_cam = fSpy()
json_path = fspy_cam.get_json()
def create_camera():
    if json_path:
        fspy_cam.get_image()
        fspy_cam.get_cam_inputs()
        fspy_cam.get_fspy_data()
        fspy_cam.create_fspy_cam()
    else:
        return
         
create_camera()]]></script>
  </tool>

  <tool name="new_proj0" label="New Proj" icon="$ICON_DIR/add_new_proj.png">
    <script scriptType="python"><![CDATA[import houdinilab.projTools as projTools
from importlib import reload
import pprint
reload(projTools)

new_proj = projTools.ProjManager('/Users/suhail/Library/CloudStorage/Dropbox/matrix/config/config.ini', 'personalProjects')
new_proj.create_proj('/Users/suhail/Library/CloudStorage/Dropbox/matrix/data/csv/proj_folders.csv')
]]></script>
  </tool>

  <tool name="add_course0" label="Add Course" icon="$ICON_DIR/add_proj.png">
    <script scriptType="python"><![CDATA[import houdinilab.projTools as projTools
from importlib import reload
import pprint
reload(projTools)

new_course = projTools.ProjManager('/Users/suhail/Library/CloudStorage/Dropbox/matrix/config/config.ini', 'courses')
new_course.create_proj('/Users/suhail/Library/CloudStorage/Dropbox/matrix/data/csv/proj_folders.csv')]]></script>
  </tool>

  <tool name="add ref" label="Add Ref" icon="/Applications/Houdini/sidefx_packages/SideFXLabs20.0/help/icons/ruler.svg">
    <script scriptType="python"><![CDATA[import hou

for node in hou.selectedNodes():
    node_g = node.parmTemplateGroup()
    source = hou.StringParmTemplate('ref_source', 'Reference Source', 1, string_type=hou.stringParmType.NodeReference)
    node_g.insertBefore((0,),source)
    node.setParmTemplateGroup(node_g)
    node.setColor(hou.Color((.38,.408,.553)))
print ("hou.node(pwd().evalParm('ref_source')).evalParm('enter_parm')")]]></script>
  </tool>

  <tool name="axis_ref" label="Axis Ref" icon="/Applications/Houdini/sidefx_packages/SideFXLabs20.0/help/icons/calculateslope.svg">
    <script scriptType="python"><![CDATA[import hou

if not hou.selectedNodes():
    obj = hou.node('/obj/')
    geo = obj.createNode('geo', 'orient_test_geo')
else:
    geo = hou.selectedNodes()[0].parent()
x_dir = geo.createNode('box', 'x_dir')
x_dir.parmTuple('size').set((0.5,0.05,0.05))
x_dir.parm('tx').setExpression('ch("sizex")/2')
color1 = geo.createNode('color', 'color1')
color1.setInput(0, x_dir, 0)
color1.parmTuple('color').set((.305, 0.075945, 0.075945))

y_dir = geo.createNode('box', 'y_dir')
y_dir.parmTuple('size').set((0.05,0.5,0.05))
y_dir.parm('ty').setExpression('ch("sizey")/2')
color2 = geo.createNode('color', 'color2')
color2.setInput(0, y_dir, 0)
color2.parmTuple('color').set((0.075945, 0.305, 0.075945))

z_dir = geo.createNode('box', 'z_dir')
z_dir.parmTuple('size').set((0.05,0.05,0.5))
z_dir.parm('tz').setExpression('ch("sizez")/2')
color3 = geo.createNode('color', 'color3')
color3.setInput(0, z_dir, 0)
color3.parmTuple('color').set((0.075945, 00.075945, 0.305))

merge = geo.createNode('merge', 'merge_axis')
merge.setInput(0, color1, 0)
merge.setInput(1, color2, 0)
merge.setInput(2, color3, 0)

null = geo.createNode('null', 'axis_out')
null.setInput(0, merge, 0)
null.setDisplayFlag('on')
null.setRenderFlag('on')


geo.layoutChildren()]]></script>
  </tool>

  <tool name="tool_1" label="New Tool" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import os, re

def kitbash_matfile_paths(kitname: str = 'MTM'):
    kb3d_mtm = hou.node(f'/obj/KB3D_{kitname}')
    matnet_node = kb3d_mtm.node('matnet')
    for subnet in matnet_node.children():
        if subnet.type().name() == 'subnet':
            for mtlximage_node in subnet.children():
                if mtlximage_node.type().name()=='mtlximage':
                    file_parm = mtlximage_node.parm('file')
                    if file_parm is not None:
                        file_path = file_parm.eval()
                        if not os.path.exists(file_path):
                            print(f'`{os.path.basename(file_path)}`')

                        
kitbash_matfile_paths('MTM')

]]></script>
  </tool>

  <toolshelf name="suhail" label="Suhail">
    <memberTool name="glb2usd0"/>
    <memberTool name="fspy_cam"/>
    <memberTool name="new_proj0"/>
    <memberTool name="add_course0"/>
    <memberTool name="add ref"/>
    <memberTool name="axis_ref"/>
    <memberTool name="tool_1"/>
    <memberTool name="hda_bkup"/>
    <memberTool name="node_color"/>
    <memberTool name="copy_node_col"/>
    <memberTool name="clear_recent_files"/>
    <memberTool name="google_drive"/>
    <memberTool name="ngrok"/>
  </toolshelf>

  <tool name="hda_bkup" label="HDA Backup" icon="hicon:/SVGIcons.index?TOP_hdaprocessor.svg">
    <script scriptType="python"><![CDATA[import hou
import os

def save_scene_with_hda_name():
    selected_node = hou.selectedNodes()
    if not selected_node:
        hou.ui.displayMessage("No node selected. Please select an HDA node.")
        return

    if len(selected_node) > 1:
        hou.ui.displayMessage("Please select only one node.")
        return

    if not selected_node[0].type().definition():
        hou.ui.displayMessage("Selected node is not an HDA.")
        return

    hda_file = selected_node[0].type().definition().libraryFilePath()
    hda_dir, hda_filename = os.path.split(hda_file)
    hda_name, _ = os.path.splitext(hda_filename)
    hda_name_parts = hda_name.split('.')
    if hda_name_parts[-1].isdigit():
        hda_name = '.'.join(hda_name_parts[:-2])
        hda_name = hda_name.replace('.', '_')
    hda_scene_dir = os.path.join(hda_dir, '.' + hda_name)
    if not os.path.exists(hda_scene_dir):
        os.makedirs(hda_scene_dir)
    hda_scene_file = os.path.join(hda_scene_dir, hda_name + '.hip')
    hou.hipFile.save(hda_scene_file)
    hou.ui.displayMessage("Scene saved with HDA name in folder: {}".format(hda_scene_dir))

save_scene_with_hda_name()
]]></script>
  </tool>
</shelfDocument>
